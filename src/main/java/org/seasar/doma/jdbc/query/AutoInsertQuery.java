package org.seasar.doma.jdbc.query;

import static org.seasar.doma.internal.util.AssertionUtil.assertNotNull;

import java.lang.reflect.Method;
import java.sql.Statement;
import java.util.ArrayList;
import org.seasar.doma.internal.jdbc.entity.AbstractPostInsertContext;
import org.seasar.doma.internal.jdbc.entity.AbstractPreInsertContext;
import org.seasar.doma.internal.jdbc.sql.PreparedSqlBuilder;
import org.seasar.doma.jdbc.Config;
import org.seasar.doma.jdbc.JdbcException;
import org.seasar.doma.jdbc.SqlKind;
import org.seasar.doma.jdbc.entity.EntityDesc;
import org.seasar.doma.jdbc.entity.GeneratedIdPropertyDesc;
import org.seasar.doma.jdbc.id.IdGenerationConfig;
import org.seasar.doma.message.Message;

public class AutoInsertQuery<ENTITY> extends AutoModifyQuery<ENTITY> implements InsertQuery {

  protected boolean nullExcluded;

  protected GeneratedIdPropertyDesc<ENTITY, ?, ?> generatedIdPropertyDesc;

  protected IdGenerationConfig idGenerationConfig;

  public AutoInsertQuery(EntityDesc<ENTITY> entityDesc) {
    super(entityDesc);
  }

  @Override
  public void prepare() {
    super.prepare();
    assertNotNull(method, entityDesc, entity);
    executable = true;
    preInsert();
    prepareIdAndVersionPropertyDescs();
    prepareOptions();
    prepareTargetPropertyDescs();
    prepareIdValue();
    prepareVersionValue();
    prepareSql();
    assertNotNull(sql);
  }

  protected void preInsert() {
    var context = new AutoPreInsertContext<>(entityDesc, method, config);
    entityDesc.preInsert(entity, context);
    if (context.getNewEntity() != null) {
      entity = context.getNewEntity();
    }
  }

  @Override
  protected void prepareIdAndVersionPropertyDescs() {
    super.prepareIdAndVersionPropertyDescs();
    generatedIdPropertyDesc = entityDesc.getGeneratedIdPropertyDesc();
    if (generatedIdPropertyDesc != null) {
      idGenerationConfig = new IdGenerationConfig(config, entityDesc);
      generatedIdPropertyDesc.validateGenerationStrategy(idGenerationConfig);
      autoGeneratedKeysSupported =
          generatedIdPropertyDesc.isAutoGeneratedKeysSupported(idGenerationConfig);
    }
  }

  protected void prepareTargetPropertyDescs() {
    targetPropertyDescs = new ArrayList<>(entityDesc.getEntityPropertyDescs().size());
    for (var propertyDesc : entityDesc.getEntityPropertyDescs()) {
      if (!propertyDesc.isInsertable()) {
        continue;
      }
      var property = propertyDesc.createProperty();
      property.load(entity);
      if (propertyDesc.isId()) {
        if (propertyDesc != generatedIdPropertyDesc
            || generatedIdPropertyDesc.isIncluded(idGenerationConfig)) {
          targetPropertyDescs.add(propertyDesc);
        }
        if (generatedIdPropertyDesc == null && property.getWrapper().get() == null) {
          throw new JdbcException(Message.DOMA2020, entityDesc.getName(), propertyDesc.getName());
        }
        continue;
      }
      if (propertyDesc.isVersion()) {
        targetPropertyDescs.add(propertyDesc);
        continue;
      }
      if (nullExcluded) {
        if (property.getWrapper().get() == null) {
          continue;
        }
      }
      if (!isTargetPropertyName(propertyDesc.getName())) {
        continue;
      }
      targetPropertyDescs.add(propertyDesc);
    }
  }

  protected void prepareIdValue() {
    if (generatedIdPropertyDesc != null && idGenerationConfig != null) {
      entity = generatedIdPropertyDesc.preInsert(entityDesc, entity, idGenerationConfig);
    }
  }

  protected void prepareVersionValue() {
    if (versionPropertyDesc != null) {
      entity = versionPropertyDesc.setIfNecessary(entityDesc, entity, 1);
    }
  }

  protected void prepareSql() {
    var naming = config.getNaming();
    var dialect = config.getDialect();
    var builder = new PreparedSqlBuilder(config, SqlKind.INSERT, sqlLogType);
    builder.appendSql("insert into ");
    builder.appendSql(entityDesc.getQualifiedTableName(naming::apply, dialect::applyQuote));
    builder.appendSql(" (");
    for (var propertyDesc : targetPropertyDescs) {
      builder.appendSql(propertyDesc.getColumnName(naming::apply, dialect::applyQuote));
      builder.appendSql(", ");
    }
    builder.cutBackSql(2);
    builder.appendSql(") values (");
    for (var propertyDesc : targetPropertyDescs) {
      var property = propertyDesc.createProperty();
      property.load(entity);
      builder.appendParameter(property.asInParameter());
      builder.appendSql(", ");
    }
    builder.cutBackSql(2);
    builder.appendSql(")");
    sql = builder.build(this::comment);
  }

  @Override
  public void generateId(Statement statement) {
    if (generatedIdPropertyDesc != null && idGenerationConfig != null) {
      entity =
          generatedIdPropertyDesc.postInsert(entityDesc, entity, idGenerationConfig, statement);
    }
  }

  @Override
  public void complete() {
    postInsert();
  }

  protected void postInsert() {
    var context = new AutoPostInsertContext<>(entityDesc, method, config);
    entityDesc.postInsert(entity, context);
    if (context.getNewEntity() != null) {
      entity = context.getNewEntity();
    }
  }

  public void setNullExcluded(boolean nullExcluded) {
    this.nullExcluded = nullExcluded;
  }

  protected static class AutoPreInsertContext<E> extends AbstractPreInsertContext<E> {

    public AutoPreInsertContext(EntityDesc<E> entityDesc, Method method, Config config) {
      super(entityDesc, method, config);
    }
  }

  protected static class AutoPostInsertContext<E> extends AbstractPostInsertContext<E> {

    public AutoPostInsertContext(EntityDesc<E> entityDesc, Method method, Config config) {
      super(entityDesc, method, config);
    }
  }
}
