package org.seasar.doma.jdbc.query;

import static org.seasar.doma.internal.util.AssertionUtil.assertEquals;
import static org.seasar.doma.internal.util.AssertionUtil.assertNotNull;

import java.lang.reflect.Method;
import java.sql.Statement;
import java.util.ArrayList;
import org.seasar.doma.internal.jdbc.entity.AbstractPostInsertContext;
import org.seasar.doma.internal.jdbc.entity.AbstractPreInsertContext;
import org.seasar.doma.internal.jdbc.sql.PreparedSqlBuilder;
import org.seasar.doma.jdbc.Config;
import org.seasar.doma.jdbc.JdbcException;
import org.seasar.doma.jdbc.SqlKind;
import org.seasar.doma.jdbc.entity.EntityDesc;
import org.seasar.doma.jdbc.entity.GeneratedIdPropertyDesc;
import org.seasar.doma.jdbc.id.IdGenerationConfig;
import org.seasar.doma.jdbc.id.ReservedIdProvider;
import org.seasar.doma.message.Message;

public class AutoBatchInsertQuery<ENTITY> extends AutoBatchModifyQuery<ENTITY>
    implements BatchInsertQuery {

  protected GeneratedIdPropertyDesc<ENTITY, ?, ?> generatedIdPropertyDesc;

  protected IdGenerationConfig idGenerationConfig;

  protected boolean batchSupported = true;

  public AutoBatchInsertQuery(EntityDesc<ENTITY> entityDesc) {
    super(entityDesc);
  }

  @Override
  public void prepare() {
    super.prepare();
    assertNotNull(method, entities, sqls);
    var size = entities.size();
    if (size == 0) {
      return;
    }
    executable = true;
    executionSkipCause = null;
    currentEntity = entities.get(0);
    preInsert();
    prepareIdAndVersionPropertyDescs();
    prepareOptions();
    prepareTargetPropertyDescs();
    prepareIdValue();
    prepareVersionValue();
    prepareSql();
    entities.set(0, currentEntity);
    for (var it = entities.listIterator(1); it.hasNext(); ) {
      currentEntity = it.next();
      preInsert();
      prepareIdValue();
      prepareVersionValue();
      prepareSql();
      it.set(currentEntity);
    }
    currentEntity = null;
    assertEquals(entities.size(), sqls.size());
  }

  protected void preInsert() {
    var context = new AutoBatchPreInsertContext<>(entityDesc, method, config);
    entityDesc.preInsert(currentEntity, context);
    if (context.getNewEntity() != null) {
      currentEntity = context.getNewEntity();
    }
  }

  @Override
  protected void prepareIdAndVersionPropertyDescs() {
    super.prepareIdAndVersionPropertyDescs();
    generatedIdPropertyDesc = entityDesc.getGeneratedIdPropertyDesc();
    if (generatedIdPropertyDesc != null) {
      if (idGenerationConfig == null) {
        idGenerationConfig =
            new IdGenerationConfig(
                config, entityDesc, new ReservedIdProvider(config, entityDesc, entities.size()));
        generatedIdPropertyDesc.validateGenerationStrategy(idGenerationConfig);
        autoGeneratedKeysSupported =
            generatedIdPropertyDesc.isAutoGeneratedKeysSupported(idGenerationConfig);
        batchSupported = generatedIdPropertyDesc.isBatchSupported(idGenerationConfig);
      }
    }
  }

  protected void prepareTargetPropertyDescs() {
    targetPropertyDescs = new ArrayList<>(entityDesc.getEntityPropertyDescs().size());
    for (var propertyDesc : entityDesc.getEntityPropertyDescs()) {
      if (!propertyDesc.isInsertable()) {
        continue;
      }
      if (propertyDesc.isId()) {
        if (propertyDesc != generatedIdPropertyDesc
            || generatedIdPropertyDesc.isIncluded(idGenerationConfig)) {
          targetPropertyDescs.add(propertyDesc);
        }
        if (generatedIdPropertyDesc == null) {
          var property = propertyDesc.createProperty();
          property.load(currentEntity);
          if (property.getWrapper().get() == null) {
            throw new JdbcException(Message.DOMA2020, entityDesc.getName(), propertyDesc.getName());
          }
        }
        continue;
      }
      if (!isTargetPropertyName(propertyDesc.getName())) {
        continue;
      }
      targetPropertyDescs.add(propertyDesc);
    }
  }

  protected void prepareIdValue() {
    if (generatedIdPropertyDesc != null && idGenerationConfig != null) {
      currentEntity =
          generatedIdPropertyDesc.preInsert(entityDesc, currentEntity, idGenerationConfig);
    }
  }

  protected void prepareVersionValue() {
    if (versionPropertyDesc != null) {
      currentEntity = versionPropertyDesc.setIfNecessary(entityDesc, currentEntity, 1);
    }
  }

  protected void prepareSql() {
    var naming = config.getNaming();
    var dialect = config.getDialect();
    var builder = new PreparedSqlBuilder(config, SqlKind.BATCH_INSERT, sqlLogType);
    builder.appendSql("insert into ");
    builder.appendSql(entityDesc.getQualifiedTableName(naming::apply, dialect::applyQuote));
    builder.appendSql(" (");
    for (var p : targetPropertyDescs) {
      builder.appendSql(p.getColumnName(naming::apply, dialect::applyQuote));
      builder.appendSql(", ");
    }
    builder.cutBackSql(2);
    builder.appendSql(") values (");
    for (var propertyDesc : targetPropertyDescs) {
      var property = propertyDesc.createProperty();
      property.load(currentEntity);
      builder.appendParameter(property.asInParameter());
      builder.appendSql(", ");
    }
    builder.cutBackSql(2);
    builder.appendSql(")");
    var sql = builder.build(this::comment);
    sqls.add(sql);
  }

  @Override
  public boolean isBatchSupported() {
    return batchSupported;
  }

  @Override
  public void generateId(Statement statement, int index) {
    if (generatedIdPropertyDesc != null && idGenerationConfig != null) {
      var newEntity =
          generatedIdPropertyDesc.postInsert(
              entityDesc, entities.get(index), idGenerationConfig, statement);
      entities.set(index, newEntity);
    }
  }

  @Override
  public void complete() {
    for (var it = entities.listIterator(); it.hasNext(); ) {
      currentEntity = it.next();
      postInsert();
      it.set(currentEntity);
    }
  }

  protected void postInsert() {
    var context = new AutoBatchPostInsertContext<>(entityDesc, method, config);
    entityDesc.postInsert(currentEntity, context);
    if (context.getNewEntity() != null) {
      currentEntity = context.getNewEntity();
    }
  }

  protected static class AutoBatchPreInsertContext<E> extends AbstractPreInsertContext<E> {

    public AutoBatchPreInsertContext(EntityDesc<E> entityDesc, Method method, Config config) {
      super(entityDesc, method, config);
    }
  }

  protected static class AutoBatchPostInsertContext<E> extends AbstractPostInsertContext<E> {

    public AutoBatchPostInsertContext(EntityDesc<E> entityDesc, Method method, Config config) {
      super(entityDesc, method, config);
    }
  }
}
